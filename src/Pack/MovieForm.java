/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pack;

import cpit380practice.FileChooser;
import cpit380practice.FrameSequencer;
import cpit380practice.MovieMaker;
import cpit380practice.Picture;
import cpit380practice.Pixel;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class MovieForm extends javax.swing.JFrame {

    /**
     * Creates new form MovieForm
     */
    public MovieForm() {
        initComponents();
        jLabel1.setIcon(new ImageIcon("src\\pics\\Welcomee.jpg"));
        backicon.setIcon(new ImageIcon(new Picture("src\\pics\\back.png").getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TickerTape = new javax.swing.JButton();
        SunsetMovie = new javax.swing.JButton();
        Backgroundsubtraction = new javax.swing.JButton();
        Toprighttobottomleft = new javax.swing.JButton();
        Toplefttobottomright = new javax.swing.JButton();
        trajectoryofmotion = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        back = new javax.swing.JButton();
        backicon = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TickerTape.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        TickerTape.setText("Ticker Tape");
        TickerTape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TickerTapeActionPerformed(evt);
            }
        });
        jPanel1.add(TickerTape, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 190, 232, 50));

        SunsetMovie.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SunsetMovie.setText("Sunset Movie");
        SunsetMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SunsetMovieActionPerformed(evt);
            }
        });
        jPanel1.add(SunsetMovie, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 232, 50));

        Backgroundsubtraction.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Backgroundsubtraction.setText("Background subtraction");
        Backgroundsubtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackgroundsubtractionActionPerformed(evt);
            }
        });
        jPanel1.add(Backgroundsubtraction, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 400, 232, 50));

        Toprighttobottomleft.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Toprighttobottomleft.setText("Top right to bottom left");
        Toprighttobottomleft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToprighttobottomleftActionPerformed(evt);
            }
        });
        jPanel1.add(Toprighttobottomleft, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 232, 50));

        Toplefttobottomright.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Toplefttobottomright.setText("Top left to bottom right");
        Toplefttobottomright.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToplefttobottomrightActionPerformed(evt);
            }
        });
        jPanel1.add(Toplefttobottomright, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 232, 50));

        trajectoryofmotion.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        trajectoryofmotion.setText("Trajectory Of Motion ");
        trajectoryofmotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trajectoryofmotionActionPerformed(evt);
            }
        });
        jPanel1.add(trajectoryofmotion, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 232, 50));

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Edge detection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 232, 50));

        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 550, 110, 30));
        jPanel1.add(backicon, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 530, 110, 60));

        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TickerTapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TickerTapeActionPerformed
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            String message = JOptionPane.showInputDialog("please enter your message");
            int framesPerSec = 30;
            Picture p = null;
            Graphics g = null;
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            Font font = new Font("Arial", Font.BOLD, 24);
            boolean right = true;
            // loop for 2 seconds of animation
            for (int j = 0, k = 0; j < framesPerSec * time; j++) {
                // draw the string
                p = new Picture(500, 400);
                g = p.getGraphics();
                g.setColor(Color.BLACK);
                g.setFont(font);
                if (right) {
                    if (k * 10 > p.getWidth() - message.length() * 12) {
                        right = false;
                    }
                } else if (k < 1) {
                    right = true;
                }
                if (right) {
                    g.drawString(message, k++ * 10, 200);
                } else {
                    g.drawString(message, k-- * 10, 200);
                }
                // add frame to sequencer
                frameSequencer.addFrame(p);
            }

            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_TickerTapeActionPerformed

    private void SunsetMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SunsetMovieActionPerformed
        int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration in seconds"));
        String fName = FileChooser.pickAFile();
        Picture beachP = new Picture(fName);

        // declare other variables
        Picture target = null;
        FrameSequencer frameSequencer = new FrameSequencer(fName);
        int framesPerSec = 30;

        frameSequencer.setShown(true);

        // loop creating the frames
        for (int i = 0; i < framesPerSec * time; i++) {
            beachP.makeSunset(0.99);
            frameSequencer.addFrame(beachP);
        }

        // play the movie
        frameSequencer.play(framesPerSec);
        
    }//GEN-LAST:event_SunsetMovieActionPerformed

    private void BackgroundsubtractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackgroundsubtractionActionPerformed
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            // load the pictures
            JFileChooser fc = new JFileChooser("Pics\\Background_subtraction");
            fc.showOpenDialog(null);
            String foreground = fc.getSelectedFile().getAbsolutePath();
            Picture foregroundPic = null;

            fc.showOpenDialog(null);
            String oldBG = fc.getSelectedFile().getAbsolutePath();
            Picture oldBGPic = new Picture(oldBG);

            fc.showOpenDialog(null);
            String newBG = fc.getSelectedFile().getAbsolutePath();
            Picture newBGPic = new Picture(newBG);

            // declare other variables
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            int framesPerSec = 30;
            frameSequencer.setShown(true);
            // loop creating the frames
            for (int i = 0; i < framesPerSec * time; i++) {
                foregroundPic = new Picture(foreground);
                foregroundPic.swapBackground(oldBGPic, newBGPic, i);
                frameSequencer.addFrame(foregroundPic);
            }

            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BackgroundsubtractionActionPerformed

    private void trajectoryofmotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trajectoryofmotionActionPerformed
        Picture p = null;
        Graphics g = null;
        FrameSequencer frameSequencer = new FrameSequencer("Movie");

        int trackA = 0;
        int ballhitA = 0; //164
        int startRow = 40;
        int xx = 1;
        int yy = 1;
        int ballMiddleHight = 0;
        int balldistance = 0;
        int ballhitB = 0;
        int balldistanceB = 0;

        for (int i = 0; i < 250; i++) {
            if (i <= 100) {
                if (trackA <= 83) {
                    p = new Picture(550, 200);
                    g = p.getGraphics();
                    g.setColor(Color.BLACK);
                    g.fillRect(0, 199, 600, 2);

                    g.setColor(Color.ORANGE);
                    g.fillRect(startRow, i * 2, 40, 40);
                    if (i == 82) {
                        ballhitA = i * 2;
                    }
                    trackA++;
                }

                if (trackA >= 83 && trackA <= 85) {
                    p = new Picture(550, 200);
                    g = p.getGraphics();
                    g.setColor(Color.BLACK);
                    g.fillRect(0, 199, 600, 2);

                    g.setColor(Color.blue);
                    g.fillOval(startRow, i * 2, 40, 40);
                    trackA++;
                }

            }

            if (i >= 85 && i <= 130) {
                p = new Picture(550, 200);
                g = p.getGraphics();
                g.setColor(Color.BLACK);
                g.fillRect(0, 199, 600, 2);

                g.setColor(Color.blue);
                g.fillOval(startRow + (++xx * 3), ballhitA - (++yy * 2), 40, 40);
                if (i == 129) {
                    ballMiddleHight = ballhitA - (++yy * 2);
                    balldistance = startRow + (++xx * 3);
                    yy = 1;
                    xx = 1;
                }
            }

            if (i >= 130 && i <= 174) {
                p = new Picture(550, 200);
                g = p.getGraphics();
                g.setColor(Color.BLACK);
                g.fillRect(0, 199, 600, 2);

                g.setColor(Color.blue);
                g.fillOval(balldistance + (++xx * 3), ballMiddleHight + (++yy * 2), 40, 40);
                if (i == 173) {
                    ballhitB = ballMiddleHight + (++yy * 2);
                    balldistanceB = balldistance + (++xx * 3);
                    yy = 1;
                    xx = 1;
                }
            }

            if (i >= 174 && i <= 178) {
                p = new Picture(550, 200);
                g = p.getGraphics();
                g.setColor(Color.BLACK);
                g.fillRect(0, 199, 600, 2);

                g.setColor(Color.blue);
                g.fillOval(balldistanceB, ballhitB, 50, 35);
            }

            if (i >= 178) {
                p = new Picture(550, 200);
                g = p.getGraphics();
                g.setColor(Color.BLACK);
                g.fillRect(0, 199, 600, 2);

                g.setColor(Color.blue);
                g.fillOval(balldistanceB + (++xx * 3), ballhitB - ++yy, 40, 40);
            }

            // add frame to sequencer
            frameSequencer.addFrame(p);
        }

        // play the movie
        frameSequencer.play(40);
    }//GEN-LAST:event_trajectoryofmotionActionPerformed

    private void ToprighttobottomleftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToprighttobottomleftActionPerformed
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            int framesPerSec = 30;
            Picture p = null;
            Graphics g = null;
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            frameSequencer.setShown(true);

            // loop through the first second
            for (int i = 0; i < time; i++) {
                double curved = 0;
                for (int j = 0; j < framesPerSec; j++) {
                    // draw a filled rectangle
                    p = new Picture(400, 400);
                    g = p.getGraphics();
                    g.setColor(Color.RED);
                    g.fillRect(350 - j * 12, (int) (j * curved), 50, 50);
                    curved += 0.415;

                    // add frame to sequencer
                    frameSequencer.addFrame(p);
                }
            }

            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ToprighttobottomleftActionPerformed

    private void ToplefttobottomrightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToplefttobottomrightActionPerformed
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            int framesPerSec = 30;
            Picture p = null;
            Graphics g = null;
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            frameSequencer.setShown(true);
            for (int i = 0; i < time; i++) {
                double curved = 0;
                for (int j = 0; j < framesPerSec; j++) {
                    // draw a filled rectangle
                    p = new Picture(400, 400);
                    g = p.getGraphics();
                    g.setColor(Color.RED);
                    g.fillRect(j * 12, (int) (j * curved), 50, 50);
                    curved += 0.415;
                    // add frame to sequencer
                    frameSequencer.addFrame(p);
                }
            }
            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ToplefttobottomrightActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            JFileChooser fc = new JFileChooser("Pics\\");
            fc.showOpenDialog(null);
            String fName = fc.getSelectedFile().getAbsolutePath();
            Picture pic = new Picture(fName);

            Picture copyPict = null;

            // declare other variables
            FrameSequencer frameSequencer = new FrameSequencer("movie");
            int framesPerSec = 30;

            // loop creating the frames
            for (int i = 0; i < framesPerSec * time; i++) {
                copyPict = new Picture(pic);
                double topAverage = 0.0;
                double bottomAverage = 0.0;

                for (int x = 0; x < pic.getHeight() - 1; x++) {
                    for (int y = 0; y < copyPict.getWidth(); y++) {
                        Pixel topPixel = copyPict.getPixel(y, x);
                        Pixel bottomPixel = copyPict.getPixel(y, x + 1);

                        topAverage = (topPixel.getRed() + topPixel.getGreen() + topPixel.getBlue()) / 3.0;
                        bottomAverage = (bottomPixel.getRed() + bottomPixel.getGreen() + bottomPixel.getBlue()) / 3.0;

                        if (Math.abs(topAverage - bottomAverage) < (time * framesPerSec + 1) - i) {
                            topPixel.setColor(Color.WHITE);
                        } else {
                            topPixel.setColor(Color.BLACK);
                        }
                    }
                }
                //copyPict.edgeDetection(time * framesPerSec - i);
                frameSequencer.addFrame(copyPict);
            }

            // play the movie
            frameSequencer.play(framesPerSec);
            // maker.makeSunsetMovie("movie",value,time);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        this.toBack();
        this.setVisible(false);
        Welcompage p = new Welcompage();
        p.setVisible(true);
        p.toFront();
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backgroundsubtraction;
    private javax.swing.JButton SunsetMovie;
    private javax.swing.JButton TickerTape;
    private javax.swing.JButton Toplefttobottomright;
    private javax.swing.JButton Toprighttobottomleft;
    private javax.swing.JButton back;
    private javax.swing.JLabel backicon;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton trajectoryofmotion;
    // End of variables declaration//GEN-END:variables
}
